package semverparams

// Code generated by mkparamfilefunc; DO NOT EDIT.
// with parameters set at:
//	[command line]: Argument:3: "-group" "semver-checks"
//	[command line]: Argument:1: "-private"
import (
	"path/filepath"

	"github.com/nickwells/filecheck.mod/filecheck"
	"github.com/nickwells/param.mod/v6/param"
	"github.com/nickwells/xdg.mod/xdg"
)

/*
setConfigFileForGroupSemverChecks adds a config file to the set which the param
parser will process before checking the command line parameters.

This function is one of a pair which add the global and personal config files.
It is generally best practice to add the global config file before adding the
personal one. This allows any system-wide defaults to be overridden by personal
choices. Also any parameters which can only be set once can be set in the global
config file, thereby enforcing a global policy.
*/
func setConfigFileForGroupSemverChecks(ps *param.PSet) error {
	baseDir := xdg.ConfigHome()

	ps.AddGroupConfigFile("semver-checks",
		filepath.Join(baseDir,
			"github.com",
			"nickwells",
			"semverparams.mod",
			"v6",
			"semverparams",
			"group-semver-checks.cfg"),
		filecheck.Optional)
	return nil
}

/*
setGlobalConfigFileForGroupSemverChecks adds a config file to the set which the
param parser will process before checking the command line parameters.

This function is one of a pair which add the global and personal config files.
It is generally best practice to add the global config file before adding the
personal one. This allows any system-wide defaults to be overridden by personal
choices. Also any parameters which can only be set once can be set in the global
config file, thereby enforcing a global policy.
*/
func setGlobalConfigFileForGroupSemverChecks(ps *param.PSet) error {
	dirs := xdg.ConfigDirs()
	if len(dirs) == 0 {
		return nil
	}
	baseDir := dirs[0]

	ps.AddGroupConfigFile("semver-checks",
		filepath.Join(baseDir,
			"github.com",
			"nickwells",
			"semverparams.mod",
			"v6",
			"semverparams",
			"group-semver-checks.cfg"),
		filecheck.Optional)
	return nil
}
